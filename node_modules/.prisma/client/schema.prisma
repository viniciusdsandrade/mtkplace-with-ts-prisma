generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String

  saleAsBuyer  Sale[]       @relation("buyer") // 1-N: Um usuário pode ter várias compras
  saleAsSeller Sale[]       @relation("seller") // 1-N: Um usuário pode ter várias vendas
  userAccess   UserAccess[] // N-1: Um usuário pode ter vários acessos
  Store        Store[] // N-1: Um usuário pode ter várias lojas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserAccess {
  id       Int  @id @default(autoincrement())
  accessId Int? // 1-N : Um UserAccess pode ter vários acessos
  userId   Int? // 1-N : Um UserAccess pode ter vários usuários

  Access Access? @relation(fields: [accessId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Access {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  userAccess UserAccess[] // 1-N : Um acesso pode ter vários usuários

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id     Int    @id @default(autoincrement())
  name   String
  price  Float
  amount Int

  storeId Int? // 1-N : Um produto pode estar associado a uma loja
  Store   Store? @relation(fields: [storeId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SalerProduct SalerProduct[] // 1-N : Um produto pode estar associado a várias vendas
}

model Store {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[] // 1-N : Uma loja pode ter vários produtos

  userId Int? // 1-N : Uma loja pode estar associada a um usuário
  User   User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale {
  id Int @id @default(autoincrement())

  totalValue Float

  buyerId  Int? // 1-N : Uma venda pode ter um comprador
  sellerId Int? // 1-N : Uma venda pode ter um vendedor

  Buyer        User?          @relation("buyer", fields: [buyerId], references: [id])
  Seller       User?          @relation("seller", fields: [sellerId], references: [id])
  SalerProduct SalerProduct[] // 1-N : Uma venda pode ter vários produtos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalerProduct {
  id       Int @id @default(autoincrement())
  quantity Int

  productId Int? // 1-N : Um produto pode estar associado a várias vendas
  saleId    Int? // 1-N : Uma venda pode ter vários produtos

  Product Product? @relation(fields: [productId], references: [id])
  Sale    Sale?    @relation(fields: [saleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
